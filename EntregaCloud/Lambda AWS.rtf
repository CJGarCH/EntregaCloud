{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import \{ DynamoDBClient \} from "@aws-sdk/client-dynamodb";\
import \{\
  DynamoDBDocumentClient,\
  ScanCommand,\
  PutCommand,\
  GetCommand,\
  DeleteCommand,\
  UpdateCommand,\
\} from "@aws-sdk/lib-dynamodb";\
\
const client = new DynamoDBClient(\{\});\
const dynamo = DynamoDBDocumentClient.from(client);\
const tableName = "gastos";\
\
const deleteItem = async (id) => \{\
  await dynamo.send(new DeleteCommand(\{ TableName: tableName, Key: \{ id \} \}));\
  return `Item gasto $\{id\} borrado`;\
\};\
\
const getItem = async (id) => \{\
  const \{ Item \} = await dynamo.send(new GetCommand(\{ TableName: tableName, Key: \{ id \} \}));\
  if (!Item) throw new Error(`Item con id $\{id\} no encontrado`);\
  return Item;\
\};\
\
const getAllItems = async () => \{\
  const \{ Items \} = await dynamo.send(new ScanCommand(\{ TableName: tableName \}));\
  return Items;\
\};\
\
const putItem = async (body) => \{\
  const \{ id, price, name \} = JSON.parse(body);\
  await dynamo.send(new PutCommand(\{ TableName: tableName, Item: \{ id, price, name \} \}));\
  return `Gasto $\{name\} a\'f1adido`;\
\};\
\
const updateItem = async (id, body) => \{\
  const updateJSON = JSON.parse(body);\
  const updateExpression = [];\
  const expressionAttributeNames = \{\};\
  const expressionAttributeValues = \{\};\
\
  for (const [key, value] of Object.entries(updateJSON)) \{\
    updateExpression.push(`#$\{key\} = :$\{key\}`);\
    expressionAttributeNames[`#$\{key\}`] = key;\
    expressionAttributeValues[`:$\{key\}`] = value;\
  \}\
\
  await dynamo.send(\
    new UpdateCommand(\{\
      TableName: tableName,\
      Key: \{ id \},\
      UpdateExpression: `SET $\{updateExpression.join(', ')\}`,\
      ExpressionAttributeNames: expressionAttributeNames,\
      ExpressionAttributeValues: expressionAttributeValues,\
      ReturnValues: "UPDATED_NEW",\
    \})\
  );\
  return `Item gasto $\{id\} actualizado`;\
\};\
\
export const handler = async (event) => \{\
  const headers = \{ "Content-Type": "application/json" \};\
  let statusCode = 200;\
  let body;\
\
  try \{\
    switch (event.routeKey) \{\
      case "DELETE /gastos/\{id\}":\
        body = await deleteItem(event.pathParameters.id);\
        break;\
      case "GET /gastos/\{id\}":\
        body = await getItem(event.pathParameters.id);\
        break;\
      case "GET /gastos":\
        body = await getAllItems();\
        break;\
      case "PUT /gastos":\
        body = await putItem(event.body);\
        break;\
      case "PATCH /gastos/\{id\}":\
        body = await updateItem(event.pathParameters.id, event.body);\
        break;\
      default:\
        throw new Error(`routa no reconocida: "$\{event.routeKey\}"`);\
    \}\
  \} catch (err) \{\
    console.error(err);\
    statusCode = 400;\
    body = \{ error: err.message \};\
  \}\
\
  return \{\
    statusCode,\
    body: JSON.stringify(body),\
    headers,\
  \};\
\};\
\
}